import{_ as e,o,c as i,Q as c}from"./chunks/framework.e1e0b12f.js";const S=JSON.parse('{"title":"概要","description":"","frontmatter":{},"headers":[],"relativePath":"guide/task.md","filePath":"guide/task.md","lastUpdated":1703734600000}'),l={name:"guide/task.md"},t=c('<h1 id="outline" tabindex="-1">概要 <a class="header-anchor" href="#outline" aria-label="Permalink to &quot;概要 {#outline}&quot;">​</a></h1><p><code>pipflow</code> 内置一套完整的构建流程和多类型构建任务，实现资源的自动化处理。</p><p>主要任务类型包含：</p><ul><li><code>html</code> - HTML处理任务，可用于 <code>HTML</code> 文件的语法检查、模板渲染、压缩等</li><li><code>script</code> - JavaScript处理任务，可用于 JavaScript 文件的语法检查、美化、压缩、打包等</li><li><code>style</code> - CSS处理任务，可用于 CSS 预处理器编译、美化、压缩等处理</li><li><code>static</code> - 静态资源处理任务，可用于图片、字体等静态资源的优化、复制等处理</li><li><code>image</code> - 图片资源处理任务，专门用于图片资源的压缩、格式转换等处理</li><li><code>server</code> - 创建本地服务器任务，可以快速创建一个本地开发服务器</li><li><code>copy</code> - 复制文件任务</li><li><code>remove</code> - 删除文件任务</li><li><code>archive</code> - 打包压缩任务，可以将文件打包成 <code>zip</code> 压缩包</li><li><code>user</code> - 用户自定义任务，自定义一些全新任务，完全自主控制处理流程</li><li><code>compose</code> - 组合任务，将已有任务组合成一个新任务，实现更复杂的构建处理</li></ul><br><p>基于以上核心任务类型，可以通过配置实现自动化的资源处理，比如:</p><ul><li>HTML/CSS/JS 的语法检查和压缩</li><li>图片压缩和格式转换</li><li>打包和发布等处理</li></ul><p>你可以在已有的任务基础上进行扩展，也可以创建全新的任务，还可以将已有任务和新增任务组合成新的构建任务，极大提高工作效率。</p><p>下面我将详细介绍每一个任务类型，及其使用方法。</p>',9),d=[t];function a(s,r,p,_,n,u){return o(),i("div",null,d)}const h=e(l,[["render",a]]);export{S as __pageData,h as default};
