import{_ as s,o as e,c as a,Q as o}from"./chunks/framework.e1e0b12f.js";const y=JSON.parse('{"title":"模式与环境变量","description":"","frontmatter":{},"headers":[],"relativePath":"guide/env-and-mode.md","filePath":"guide/env-and-mode.md","lastUpdated":1699167417000}'),n={name:"guide/env-and-mode.md"},p=o(`<h1 id="模式与环境变量" tabindex="-1">模式与环境变量 <a class="header-anchor" href="#模式与环境变量" aria-label="Permalink to &quot;模式与环境变量&quot;">​</a></h1><h2 id="模式" tabindex="-1">模式 <a class="header-anchor" href="#模式" aria-label="Permalink to &quot;模式&quot;">​</a></h2><p>默认情况下，开发服务器 (<code>dev</code> 命令) 运行在 <code>development</code> (开发) 模式，而 <code>build</code> 命令则运行在 <code>production</code> (生产) 模式。</p><p>这意味着当执行 <code>pipflow build</code> 时，它会自动加载 <code>.env.production</code> 中可能存在的环境变量：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># .env.production</span></span>
<span class="line"><span style="color:#e1e4e8;">APP_TITLE=App Title</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># .env.production</span></span>
<span class="line"><span style="color:#24292e;">APP_TITLE=App Title</span></span></code></pre></div><p>在你的应用中，你可以使用 <code>p<wbr>rocess.env.APP_TITLE</code> 渲染标题。</p><p>在某些情况下，若想在 <code>pipflow build</code> 时运行不同的模式来渲染不同的标题，你可以通过传递 <code>--mode</code> 选项标志来覆盖命令使用的默认模式。例如，如果你想在 <code>staging</code> （预发布）模式下构建应用：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pipflow</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--mode</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">staging</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pipflow</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--mode</span><span style="color:#24292E;"> </span><span style="color:#032F62;">staging</span></span></code></pre></div><p>还需要新建一个 <code>.env.staging</code> 文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># .env.staging</span></span>
<span class="line"><span style="color:#e1e4e8;">APP_TITLE=App Title (staging)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># .env.staging</span></span>
<span class="line"><span style="color:#24292e;">APP_TITLE=App Title (staging)</span></span></code></pre></div><p>由于 <code>pipflow build</code> 默认运行生产模式构建，你也可以通过使用不同的模式和对应的 <code>.env</code> 文件配置来改变它，用以运行开发模式的构建：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># .env.testing</span></span>
<span class="line"><span style="color:#e1e4e8;">NODE_ENV=development</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># .env.testing</span></span>
<span class="line"><span style="color:#24292e;">NODE_ENV=development</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>当运行 <code>pipflow</code> 命令时，所有的环境变量都从对应的环境文件中载入。如果文件内部不包含 <code>NODE_ENV</code> 变量，它的值将取决于模式，例如，在 <code>production</code> 模式下被设置为 <code>&quot;production&quot;</code>，在 <code>dev</code> 模式下被设置为 <code>&quot;development&quot;</code>。</p><p>而 <code>NODE_ENV</code> 将决定您的应用运行的模式，是开发，还是生产。例如，如果你在执行 <code>pipflow build</code> 时将环境变量设定为 <code>NODE_ENV=development</code> ,那么构建的应用程序包的资源文件将不会进行 hash，也不会混淆压缩。</p><p>所以当你运行 <code>pipflow build</code> 命令时，无论你要部署到哪个环境，应该始终把 <code>NODE_ENV</code> 设置为 <code>&quot;production&quot;</code> 来获取可用于部署的应用程序。</p></div><div class="warning custom-block"><p class="custom-block-title">NODE_ENV</p><p>如果在环境中有默认的 <code>NODE_ENV</code>，你应该移除它或在运行 <code>pipflow</code> 命令的时候明确地设置 <code>NODE_ENV</code>。</p></div><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><p>在项目中，你可以通过 <code>p<wbr>rocess.env</code> 对象来获取环境变量, 如 <code>p<wbr>rocess.env.APP_TITLE</code>。比如在JS文件中，你可以这样写:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 生产环境</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 开发环境</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 生产环境</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 开发环境</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面是一些内建变量，在所有情况下都可以使用：</p><ul><li><code>p<wbr>rocess.env.MODE</code>: {string} 应用运行的模式。</li><li><code>p<wbr>rocess.env.PROD</code>: {boolean} 应用是否运行在生产环境。</li><li><code>p<wbr>rocess.env.DEV</code>: {boolean} 应用是否运行在开发环境 (永远与 <code>p<wbr>rocess.env.PROD</code> 相反)。</li></ul><h3 id="env文件" tabindex="-1"><code>.env</code>文件 <a class="header-anchor" href="#env文件" aria-label="Permalink to &quot;\`.env\`文件&quot;">​</a></h3><p><code>pipflow</code> 会从你的 <a href="./../config/shared-options.html#env-dir"><code>环境目录</code></a> 中的下列文件加载额外的环境变量：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">.env                # 所有情况下都会加载</span></span>
<span class="line"><span style="color:#e1e4e8;">.env.local          # 所有情况下都会加载，但会被 git 忽略</span></span>
<span class="line"><span style="color:#e1e4e8;">.env.[mode]         # 只在指定模式下加载</span></span>
<span class="line"><span style="color:#e1e4e8;">.env.[mode].local   # 只在指定模式下加载，但会被 git 忽略</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">.env                # 所有情况下都会加载</span></span>
<span class="line"><span style="color:#24292e;">.env.local          # 所有情况下都会加载，但会被 git 忽略</span></span>
<span class="line"><span style="color:#24292e;">.env.[mode]         # 只在指定模式下加载</span></span>
<span class="line"><span style="color:#24292e;">.env.[mode].local   # 只在指定模式下加载，但会被 git 忽略</span></span></code></pre></div><p>一个环境文件只包含环境变量的<code>“键=值”</code>对：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">APP_TITLE=App Title</span></span>
<span class="line"><span style="color:#e1e4e8;">API_BASE_URL=http://test.api.com</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">NODE_ENV=development</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">APP_TITLE=App Title</span></span>
<span class="line"><span style="color:#24292e;">API_BASE_URL=http://test.api.com</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">NODE_ENV=development</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">环境文件加载优先级</p><p>一份用于指定模式的环境文件 (例如 <code>.env.production</code>) 将会比一般的环境文件 (例如 <code>.env</code>) 拥有更高的优先级。</p><p>此外，<code>pipflow</code> 启动时已经存在的环境变量拥有最高优先级，并不会被 <code>.env</code> 文件覆写。</p><p><code>.env</code> 环境文件是在 <code>pipflow</code> 启动一开始时被加载，因此环境文件发生变化，你需要重启服务。</p></div><p>想要了解解析环境文件规则的细节，请参考 <a href="https://github.com/motdotla/dotenv" target="_blank" rel="noreferrer">dotenv</a>。</p><div class="warning custom-block"><p class="custom-block-title">安全注意事项</p><ul><li><code>.env.*.local</code> 文件应是本地的，可以包含敏感变量。你应该将 <code>*.local</code> 添加到你的 <code>.gitignore</code> 中，以避免它们被 <code>git</code> 检入。</li><li>由于任何暴露给 <code>pipflow</code> 源码的变量最终都将出现在客户端包中，因此环境变量应该不包含任何敏感信息。</li></ul></div>`,27),l=[p];function c(t,d,i,r,v,E){return e(),a("div",null,l)}const h=s(n,[["render",c]]);export{y as __pageData,h as default};
