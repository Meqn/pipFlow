import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.e1e0b12f.js";const g=JSON.parse('{"title":"静态资源处理","description":"","frontmatter":{},"headers":[],"relativePath":"guide/assets.md","filePath":"guide/assets.md","lastUpdated":1699711149000}'),o={name:"guide/assets.md"},p=l(`<h1 id="静态资源处理" tabindex="-1">静态资源处理 <a class="header-anchor" href="#静态资源处理" aria-label="Permalink to &quot;静态资源处理&quot;">​</a></h1><h2 id="资源文件url" tabindex="-1">资源文件URL <a class="header-anchor" href="#资源文件url" aria-label="Permalink to &quot;资源文件URL&quot;">​</a></h2><p>在页面中引入资源文件，建议用绝对路径（以 <code>/</code> 开头）引入。</p><p>你可以在 <code>pipflow.config.js</code> 配置文件中设置路径别名，在页面内通过别名+路径引入文件，编译阶段会被统一静态替换。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// pipflow.config.json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;alias&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;@img&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;/assets/images&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;@css&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;/styles&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// pipflow.config.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;alias&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;@img&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;/assets/images&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;@css&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;/styles&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- demo.html --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;@img/background.png&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 构建后的内容 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;/assets/images/background.png&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- demo.html --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;@img/background.png&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 构建后的内容 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/assets/images/background.png&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="public-目录" tabindex="-1"><code>public</code> 目录 <a class="header-anchor" href="#public-目录" aria-label="Permalink to &quot;\`public\` 目录&quot;">​</a></h2><p>如果你有下列这些资源：</p><ul><li>不会被源码引用（例如 robots.txt）</li><li>必须保持原有文件名（没有经过 hash）</li><li>...或者你压根不想引入该资源，只是想得到其 URL。</li></ul><p>那么你可以将该资源放在指定的 <code>public</code> 目录中，它应位于你的项目根目录。该目录中的资源在开发时能直接通过 <code>/</code> 根路径访问到，并且打包时会被完整复制到目标目录的根目录下。</p><p>目录默认是 <code>&lt;root&gt;/public</code>，但可以通过 <code>publicDir</code> 选项 来配置。 请参见 <a href="./../config/shared-options.html#public-dir">这里</a></p><div class="tip custom-block"><p class="custom-block-title">请注意</p><p>引入 <code>public</code> 中的资源永远应该使用根绝对路径 —— 举个例子，<code>public/icon.png</code> 应该在源码中被引用为 <code>/icon.png</code>。</p></div><h2 id="文件指纹" tabindex="-1">文件指纹 <a class="header-anchor" href="#文件指纹" aria-label="Permalink to &quot;文件指纹&quot;">​</a></h2><p>静态文件指纹是为了解决缓存问题，可以帮助优化浏览器缓存和文件更新的管理。它可以确保用户获得最新的文件版本，同时提高网站的性能和用户体验。</p><p>如果你在配置文件中开启了文件指纹，则在 <code>build</code> 之后引入的文件路径会携带文件指纹（以文件名或url参数形式）。仅在 <code>build</code> 阶段有效。</p><p>关于 <code>build.fileHash</code> 配置请参见 <a href="./../config/build-options.html#build-fileHash">这里</a></p>`,16),e=[p];function t(c,i,r,d,u,E){return a(),n("div",null,e)}const h=s(o,[["render",t]]);export{g as __pageData,h as default};
