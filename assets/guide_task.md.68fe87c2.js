import{_ as e,o,c,Q as i}from"./chunks/framework.e1e0b12f.js";const u=JSON.parse('{"title":"概要","description":"","frontmatter":{},"headers":[],"relativePath":"guide/task.md","filePath":"guide/task.md","lastUpdated":1699167417000}'),t={name:"guide/task.md"},d=i('<h1 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h1><p><code>pipflow</code> 内置一套完整的构建流程和多类型构建任务，实现资源的自动化处理。</p><p>主要任务类型包含：</p><ul><li><code>html</code> - HTML处理任务</li><li><code>script</code> - JavaScript处理任务</li><li><code>style</code> - CSS处理任务</li><li><code>static</code> - 静态资源处理任务</li><li><code>image</code> - 图片资源处理任务</li><li><code>server</code> - 创建本地服务器任务</li><li><code>copy</code> - 复制文件任务</li><li><code>remove</code> - 删除文件任务</li><li><code>archive</code> - 打包压缩任务</li><li><code>user</code> - 用户自定义任务</li><li><code>compose</code> - 组合任务</li></ul><p>基于以上任务类型，你可以很容易的实现各种构建任务。既可以在已有的任务上扩展，也可以创建新的任务，还可以将已有任务和新增任务组合成新的构建任务。</p><p>下面我将详细介绍每一个任务类型，及其使用方法。</p>',6),a=[d];function l(s,r,_,p,n,m){return o(),c("div",null,a)}const f=e(t,[["render",l]]);export{u as __pageData,f as default};
