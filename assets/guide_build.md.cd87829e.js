import{_ as s,o as a,c as l,Q as o}from"./chunks/framework.38a791dd.js";const b=JSON.parse('{"title":"构建生产版本","description":"","frontmatter":{},"headers":[],"relativePath":"guide/build.md","filePath":"guide/build.md","lastUpdated":1697424975000}'),e={name:"guide/build.md"},p=o(`<h1 id="构建生产版本" tabindex="-1">构建生产版本 <a class="header-anchor" href="#构建生产版本" aria-label="Permalink to &quot;构建生产版本&quot;">​</a></h1><p>当需要将应用部署到生产环境时，只需运行 <code>pipflow build</code> 命令。默认情况下，它使用 <code>&lt;root&gt;/index.html</code> 作为其入口，并生成能够静态部署的应用程序包。</p><h2 id="浏览器兼容性" tabindex="-1">浏览器兼容性 <a class="header-anchor" href="#浏览器兼容性" aria-label="Permalink to &quot;浏览器兼容性&quot;">​</a></h2><h3 id="browserslist" tabindex="-1">browserslist <a class="header-anchor" href="#browserslist" aria-label="Permalink to &quot;browserslist&quot;">​</a></h3><p>通过 <code>pipflow create</code> 创建的项目，在项目根目录下有一个单独的 <code>.browserslistrc</code> 文件，用于指定项目支持的浏览器范围。你也可以在 <code>package.json</code> 文件里配置 <code>browserslist</code> 字段。</p><p>这个值会被 <code>@babel/preset-env</code> 和 <code>postcss-preset-env</code> 用来确定需要转译的 JavaScript 特性和需要添加的 CSS 浏览器前缀。</p><p>现在查阅 <a href="https://github.com/browserslist/browserslist" target="_blank" rel="noreferrer">这里</a> 了解如何指定浏览器范围。</p><h3 id="polyfill" tabindex="-1">Polyfill <a class="header-anchor" href="#polyfill" aria-label="Permalink to &quot;Polyfill&quot;">​</a></h3><p>一个基于 pipflow CLI 创建的项目，它通过 <code>@babel/preset-env</code> 和 <code>browserslist</code> 配置来决定项目需要的 polyfill。</p><p>默认情况下，babel.config.js 预设 <code>useBuiltIns: &quot;usage&quot;</code>，这样它会根据源代码中出现的语言特性自动检测需要的 polyfill。这确保了最终包里 polyfill 数量的最小化。然而，这也意味着如果其中一个依赖需要特殊的 polyfill，默认情况下 Babel 无法将其检测出来。</p><p>你可以通过修改项目中的 babel.config.js 配置来自行调整 polyfill。</p><div class="tip custom-block"><p class="custom-block-title">温馨提示</p><p>我们推荐以这种方式添加 polyfill 而不是在源代码中直接导入它们，因为如果这里列出的 polyfill 在 browserslist 的目标中不需要，则它会被自动排除。</p></div><h2 id="自定义构建" tabindex="-1">自定义构建 <a class="header-anchor" href="#自定义构建" aria-label="Permalink to &quot;自定义构建&quot;">​</a></h2><p>构建生产环境应用程序包默认是通过 <code>pipflow build</code> 命令来完成的。如果在未修改配置文件 <code>pipflow.config.js</code> 的 <code>tasks</code> 选项时，其构建过程任务如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">└─┬ build</span></span>
<span class="line"><span style="color:#e1e4e8;">  └─┬ &lt;series&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    ├── del:dest</span></span>
<span class="line"><span style="color:#e1e4e8;">    ├─┬ &lt;parallel&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    │ ├── copy:public</span></span>
<span class="line"><span style="color:#e1e4e8;">    │ └── static:4</span></span>
<span class="line"><span style="color:#e1e4e8;">    ├─┬ &lt;parallel&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    │ ├── script:2</span></span>
<span class="line"><span style="color:#e1e4e8;">    │ └── style:3</span></span>
<span class="line"><span style="color:#e1e4e8;">    └─┬ &lt;parallel&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      └── html:1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">└─┬ build</span></span>
<span class="line"><span style="color:#24292e;">  └─┬ &lt;series&gt;</span></span>
<span class="line"><span style="color:#24292e;">    ├── del:dest</span></span>
<span class="line"><span style="color:#24292e;">    ├─┬ &lt;parallel&gt;</span></span>
<span class="line"><span style="color:#24292e;">    │ ├── copy:public</span></span>
<span class="line"><span style="color:#24292e;">    │ └── static:4</span></span>
<span class="line"><span style="color:#24292e;">    ├─┬ &lt;parallel&gt;</span></span>
<span class="line"><span style="color:#24292e;">    │ ├── script:2</span></span>
<span class="line"><span style="color:#24292e;">    │ └── style:3</span></span>
<span class="line"><span style="color:#24292e;">    └─┬ &lt;parallel&gt;</span></span>
<span class="line"><span style="color:#24292e;">      └── html:1</span></span></code></pre></div><p>如果你想自定义构建流程，你可以创建一个 <code>compose</code> 类型的组合任务，配置自定义构建流程。 详细配置请参见 <a href="./task-user.html#compose-task">这里</a>。</p><p>当配置完成之后，运行下面命令即可构建生产环境应用程序包：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pipflow</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">task</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">compose-build-nam</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--mode=production</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pipflow</span><span style="color:#24292E;"> </span><span style="color:#032F62;">task</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">compose-build-nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--mode=production</span></span></code></pre></div><blockquote><p>注: <code>&lt;compose-build-name&gt;</code> 代指你的组合任务名称。</p></blockquote><p>你可以将 <code>package.json</code> 中的 <code>scripts</code> 字段的 <code>build</code> 命令更改为:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;dev&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;pipflow dev&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;build&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;pipflow build&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;build&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;pipflow task &lt;compose-build-name&gt; --mode=production&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;preview&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;pipflow task server --preview&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;dev&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;pipflow dev&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line diff remove"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;build&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;pipflow build&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line diff add"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;build&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;pipflow task &lt;compose-build-name&gt; --mode=production&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;preview&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;pipflow task server --preview&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后运行 <code>npm run build</code> 即可。</p><div class="warning custom-block"><p class="custom-block-title">提醒</p><p>自定义 <code>build</code> 命令必须使用 <code>--mode=production</code> 参数。 如果要构建 <code>mode</code> 不为 <code>production</code> 的其他平台环境的部署包，请在命令开头加上 <code>cross-env NODE_ENV=production</code> (确保构建主机的环境变量 <code>NODE_ENV</code> 为 <code>production</code>)。</p><p>完整命令如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">cross-env NODE_ENV=production pipflow task &lt;compose-build-name&gt; --mode=staging</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">cross-env NODE_ENV=production pipflow task &lt;compose-build-name&gt; --mode=staging</span></span></code></pre></div></div>`,23),n=[p];function t(c,i,r,d,u,y){return a(),l("div",null,n)}const h=s(e,[["render",t]]);export{b as __pageData,h as default};
